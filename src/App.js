import * as THREE from 'three'
import { Canvas } from '@react-three/fiber'
import { useGLTF, Float, AccumulativeShadows, RandomizedLight, Environment, OrbitControls, Center, Bounds } from '@react-three/drei'
import { useControls } from 'leva'
import { MeshTransmissionMaterial } from './MeshTransmissionMaterial'

export default function App() {
  return (
    <Canvas shadows camera={{ position: [15, 10, 15], fov: 35 }}>
      <ambientLight intensity={0.75} />
      <Bounds fit observe margin={1.25}>
        <Center top>
          <GelatinousCube />
        </Center>
      </Bounds>
      <AccumulativeShadows temporal frames={100} alphaTest={0.9} color="#3ead5d" colorBlend={1} opacity={1} scale={12}>
        <RandomizedLight radius={8} ambient={0.5} intensity={1} position={[2.5, 5, -2.5]} bias={0.001} />
      </AccumulativeShadows>
      <OrbitControls minPolarAngle={0} maxPolarAngle={Math.PI / 2} autoRotate autoRotateSpeed={0.1} makeDefault />
      <Environment files="https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/dancing_hall_1k.hdr" background blur={1} />
    </Canvas>
  )
}

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.2 gelatinous_cube.glb --transform --simplify
Author: glenatron (https://sketchfab.com/glenatron)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/gelatinous-cube-e08385238f4d4b59b012233a9fbdca21
Title: Gelatinous Cube
*/

export function GelatinousCube(props) {
  const config = useControls({
    meshPhysicalMaterial: false,
    samples: { value: 6, min: 1, max: 32, step: 1 },
    refraction: { value: 1.15, min: 0, max: 2 },
    rgbShift: { value: 0.25, min: 0, max: 1 },
    noise: { value: 0.04, min: 0, max: 1, step: 0.01 },
    contrast: { value: 1, min: 0.0, max: 5.0 },
    saturation: { value: 1.0, min: 0, max: 1, step: 0.01 },
    refractionColor: 'black',
    color: '#c9ffa1',
    bg: '#334e3b'
  })
  const { nodes, materials } = useGLTF('/gelatinous_cube-transformed.glb')
  return (
    <group dispose={null}>
      <mesh geometry={nodes.cube1.geometry} position={[-0.56, 0.38, -0.11]}>
        {config.meshPhysicalMaterial ? (
          <meshPhysicalMaterial transmission={1} thickness={2.5} roughness={0} color={config.color} clearcoat={1} />
        ) : (
          <MeshTransmissionMaterial roughness={0} resolution={2048} background={new THREE.Color(config.bg)} {...config} clearcoat={1} />
        )}
      </mesh>
      <mesh
        castShadow
        renderOrder={-100}
        geometry={nodes.cube2.geometry}
        material={materials.cube_mat}
        material-side={THREE.FrontSide}
        position={[-0.56, 0.38, -0.11]}
      />
      <mesh geometry={nodes.bubbles.geometry} material={materials.cube_bubbles_mat} position={[-0.56, 0.38, -0.11]} />
      <group position={[-0.56, 0.38, -0.41]}>
        <mesh geometry={nodes.arrows.geometry} material={materials.weapons_mat} />
        <Float floatIntensity={0.2} rotationIntensity={0.2} speed={2}>
          <mesh geometry={nodes.skeleton_1.geometry} material={materials.skele_mat} />
          <mesh geometry={nodes.skeleton_2.geometry} material={materials.weapons_mat} material-side={THREE.FrontSide} />
        </Float>
      </group>
    </group>
  )
}
